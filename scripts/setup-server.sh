#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
# –ó–∞–ø—É—Å–∫–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: bash setup-server.sh

set -e

echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–µ—Ä–≤–µ—Ä–∞..."

# –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É
echo "üì¶ –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É..."
apt update && apt upgrade -y

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã
echo "üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã..."
apt install -y curl wget git nginx certbot python3-certbot-nginx

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Node.js 18+
echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Node.js..."
curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
apt-get install -y nodejs

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏–∏
echo "‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏–∏:"
node --version
npm --version

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker
echo "üê≥ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker..."
curl -fsSL https://get.docker.com -o get-docker.sh
sh get-docker.sh
rm get-docker.sh

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Compose
echo "üê≥ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Compose..."
curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Docker
echo "‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker:"
docker --version
docker-compose --version

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PM2 –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
echo "‚ö° –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PM2..."
npm install -g pm2

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
echo "üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞..."
mkdir -p /root/WebApp
cd /root/WebApp

# –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
echo "üì• –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π..."
git clone https://github.com/Folau1/WebApp.git .

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
npm install

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª .env
echo "‚öôÔ∏è –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª .env..."
cp env.example .env

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Nginx
echo "üåê –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Nginx..."
cat > /etc/nginx/sites-available/webapp << EOF
server {
    listen 80;
    server_name 109.248.11.230;

    # WebApp (React)
    location / {
        proxy_pass http://localhost:5173;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
    }

    # Admin Panel
    location /admin {
        proxy_pass http://localhost:5174;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
    }

    # API
    location /api {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
    }
}
EOF

# –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–∞–π—Ç
ln -sf /etc/nginx/sites-available/webapp /etc/nginx/sites-enabled/
rm -f /etc/nginx/sites-enabled/default

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Nginx
systemctl restart nginx
systemctl enable nginx

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é PM2
echo "‚ö° –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é PM2..."
cat > ecosystem.config.js << EOF
module.exports = {
  apps: [
    {
      name: 'webapp-server',
      script: 'server/src/index.ts',
      cwd: '/root/WebApp',
      interpreter: 'npx',
      interpreter_args: 'tsx',
      env: {
        NODE_ENV: 'production',
        PORT: 3000
      },
      instances: 1,
      autorestart: true,
      watch: false,
      max_memory_restart: '1G'
    }
  ]
};
EOF

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
echo "üóÑÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö..."
docker-compose -f docker-compose.dev.yml up -d

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo "‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
sleep 10

# –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
echo "üóÑÔ∏è –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏..."
npm run prisma:migrate

# –ó–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑—É —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
echo "üå± –ó–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑—É —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏..."
npm run prisma:seed

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º TypeScript –æ—à–∏–±–∫–∏
echo "üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º TypeScript –æ—à–∏–±–∫–∏..."
# –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ req –Ω–∞ _req –≤ admin.ts
sed -i 's/async (req, res, next) => {/async (_req, res, next) => {/g' server/src/routes/admin.ts
# –ù–æ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å req –æ–±—Ä–∞—Ç–Ω–æ —Ç–∞–º –≥–¥–µ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
sed -i 's/const { stock } = _req.body;/const { stock } = req.body;/g' server/src/routes/admin.ts
sed -i 's/const { id } = _req.params;/const { id } = req.params;/g' server/src/routes/admin.ts
sed -i 's/const data = createCategorySchema.parse(_req.body);/const data = createCategorySchema.parse(req.body);/g' server/src/routes/admin.ts
sed -i 's/const data = updateCategorySchema.parse(_req.body);/const data = updateCategorySchema.parse(req.body);/g' server/src/routes/admin.ts
sed -i 's/const data = createMediaSchema.parse(_req.body);/const data = createMediaSchema.parse(req.body);/g' server/src/routes/admin.ts
sed -i 's/const { order } = _req.body;/const { order } = req.body;/g' server/src/routes/admin.ts
sed -i 's/const { mediaIds } = _req.body;/const { mediaIds } = req.body;/g' server/src/routes/admin.ts
sed -i 's/const { productIds, categoryIds, ...data } = createDiscountSchema.parse(_req.body);/const { productIds, categoryIds, ...data } = createDiscountSchema.parse(req.body);/g' server/src/routes/admin.ts
sed -i 's/const { productIds, categoryIds, ...data } = updateDiscountSchema.parse(_req.body);/const { productIds, categoryIds, ...data } = updateDiscountSchema.parse(req.body);/g' server/src/routes/admin.ts
sed -i 's/const query = orderQuerySchema.parse(_req.query);/const query = orderQuerySchema.parse(req.query);/g' server/src/routes/admin.ts
sed -i 's/const { status } = _req.body;/const { status } = req.body;/g' server/src/routes/admin.ts
# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º catalog.ts
sed -i 's/async (_req, res, next) => {/async (req, res, next) => {/g' server/src/routes/catalog.ts
# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º payment.test.ts
sed -i 's/data: {/data: {\n        number: 1,/g' server/src/tests/payment.test.ts

# –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
echo "üî® –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ..."
npm run build

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ PM2
echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ..."
pm2 start ecosystem.config.js
pm2 save
pm2 startup

echo "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo "üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://109.248.11.230"
echo "üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://109.248.11.230/admin"
echo "üîß API: http://109.248.11.230/api"
