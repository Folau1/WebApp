version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tgshop-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tgshop
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO S3 Storage
  minio:
    image: minio/minio:latest
    container_name: tgshop-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Backend Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: tgshop-server
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/tgshop?schema=public
      PORT: 3000
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      BOT_TOKEN: ${BOT_TOKEN}
      BOT_PORT: 3001
      BOT_SECRET: ${BOT_SECRET:-internal-secret}
      WEBAPP_URL: ${WEBAPP_URL}
      ADMIN_CHAT_ID: ${ADMIN_CHAT_ID}
      YK_SHOP_ID: ${YK_SHOP_ID}
      YK_SECRET_KEY: ${YK_SECRET_KEY}
      YK_RETURN_URL: ${YK_RETURN_URL}
      YK_WEBHOOK_URL: ${YK_WEBHOOK_URL}
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_BUCKET_NAME: tgshop
      S3_REGION: us-east-1
      S3_PUBLIC_URL: ${S3_PUBLIC_URL:-http://localhost:9000/tgshop}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:8080,http://localhost:8081}
      ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@example.com}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123}
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    ports:
      - "3000:3000"
    command: >
      sh -c "
        npx prisma migrate deploy &&
        npx prisma db seed &&
        npm start
      "

  # WebApp Frontend
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: tgshop-web
    depends_on:
      - server
    ports:
      - "8080:80"

  # Admin Panel
  admin:
    build:
      context: ./apps/admin
      dockerfile: Dockerfile
    container_name: tgshop-admin
    depends_on:
      - server
    ports:
      - "8081:80"

  # Telegram Bot
  bot:
    build:
      context: ./apps/bot
      dockerfile: Dockerfile
    container_name: tgshop-bot
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/tgshop?schema=public
      BOT_TOKEN: ${BOT_TOKEN}
      BOT_PORT: 3001
      BOT_SECRET: ${BOT_SECRET:-internal-secret}
      WEBAPP_URL: ${WEBAPP_URL}
      ADMIN_CHAT_ID: ${ADMIN_CHAT_ID}
    depends_on:
      postgres:
        condition: service_healthy
      server:
        condition: service_started
    ports:
      - "3001:3001"

  # Nginx Reverse Proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: tgshop-nginx
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - web
      - admin
      - server
    ports:
      - "80:80"
      - "443:443"
    profiles:
      - production

volumes:
  postgres-data:
  minio-data:

networks:
  default:
    name: tgshop-network








